const path = require("path")

exports.createPages = async ({ graphql, actions, reporter }) => {
  const { createPage } = actions
  const blogPosts = await graphql(`
    query {
      allMdx(filter: { fileAbsolutePath: { regex: "/blog/" } }) {
        edges {
          node {
            id
            slug
            fileAbsolutePath
          }
        }
      }
    }
  `)
  const successStories = await graphql(`
    query {
      allMdx(filter: { fileAbsolutePath: { regex: "/success-stories/" } }) {
        edges {
          node {
            id
            slug
            fileAbsolutePath
          }
        }
      }
    }
  `)
  if (blogPosts.errors || successStories.errors) {
    reporter.panicOnBuild('ðŸš¨  ERROR: Loading "createPages" query')
  }
  // Create blog post pages.
  const createBlogPosts = blogPosts.data.allMdx.edges
  const createSuccessStories = successStories.data.allMdx.edges

  // you'll call `createPage` for each result
  createBlogPosts.forEach(({ node }, index) => {
    createPage({
      // The slug generated by gatsby-plugin-mdx doesn't contain a slash at the beginning
      // You can prepend it with any prefix you want
      path: `/blog/${node.slug.split("-").slice(3).join("-")}`,
      // This component will wrap our MDX content
      component: path.resolve(`./src/layouts/blogPostLayout.js`),
      // You can use the values in this context in
      // our page layout component
      context: { id: node.id },
    })
  })
  createSuccessStories.forEach(({ node }, index) => {
    createPage({
      path: `/success-stories/${node.slug}`,
      component: path.resolve(`./src/layouts/blogPostLayout.js`),
      context: { id: node.id },
    })
  })
}
